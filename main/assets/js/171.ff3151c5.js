(window.webpackJsonp=window.webpackJsonp||[]).push([[171],{737:function(e,t,a){"use strict";a.r(t);var o=a(1),r=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"middlewares"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#middlewares"}},[e._v("#")]),e._v(" Middlewares")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("x/auth")]),e._v(" module presently has no transaction handlers of its own, but does expose middlewares directly called from BaseApp's "),a("code",[e._v("CheckTx")]),e._v(" and "),a("code",[e._v("DeliverTx")]),e._v(", which can be used for performing any operations on transactions, such as basic validity checks on a transaction such that it could be thrown out of the mempool, or routing the transactions to their "),a("code",[e._v("Msg")]),e._v(" service to perform state transitions.\nThe middlewares can be seen as a set of decorators wrapped one on top of the other, that check transactions within the current context, per "),a("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/v0.46.0-beta2/docs/architecture/adr-045-check-delivertx-middlewares.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("ADR-045"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("Note that the middlewares are called on both "),a("code",[e._v("CheckTx")]),e._v(" and "),a("code",[e._v("DeliverTx")]),e._v(", as Tendermint proposers presently have the ability to include in their proposed block transactions which fail "),a("code",[e._v("CheckTx")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"list-of-middleware"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list-of-middleware"}},[e._v("#")]),e._v(" List of Middleware")]),e._v(" "),a("p",[e._v("The auth module provides:")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("one "),a("code",[e._v("tx.Handler")]),e._v(", called "),a("code",[e._v("RunMsgsTxHandler")]),e._v(", which routes each "),a("code",[e._v("sdk.Msg")]),e._v(" from a transaction to the correct module "),a("code",[e._v("Msg")]),e._v(" service, and runs each "),a("code",[e._v("sdk.Msg")]),e._v(" to perform state transitions,")])]),e._v(" "),a("li",[a("p",[e._v("a set of middlewares that are recursively chained together around the base "),a("code",[e._v("tx.Handler")]),e._v(" in the following order (the first middleware's "),a("code",[e._v("pre")]),e._v("-hook is run first, and "),a("code",[e._v("post")]),e._v("-hook is run last):")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("NewTxDecoderMiddleware")]),e._v(": Decodes the transaction bytes from ABCI "),a("code",[e._v("CheckTx")]),e._v(" and "),a("code",[e._v("DeliverTx")]),e._v(" into the SDK transaction type. This middleware is generally called first, as most middlewares logic rely on a decoded SDK transaction.")]),e._v(" "),a("li",[a("code",[e._v("GasTxMiddleware")]),e._v(": Sets the "),a("code",[e._v("GasMeter")]),e._v(" in the "),a("code",[e._v("Context")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("RecoveryTxMiddleware")]),e._v(": Wraps the next middleware with a defer clause to recover from any downstream panics in the middleware chain to return an error with information on gas provided and gas used.")]),e._v(" "),a("li",[a("code",[e._v("RejectExtensionOptionsMiddleware")]),e._v(": Rejects all extension options which can optionally be included in protobuf transactions.")]),e._v(" "),a("li",[a("code",[e._v("IndexEventsTxMiddleware")]),e._v(": Choose which events to index in Tendermint. Make sure no events are emitted outside of this middleware.")]),e._v(" "),a("li",[a("code",[e._v("ValidateBasicMiddleware")]),e._v(": Calls "),a("code",[e._v("tx.ValidateBasic")]),e._v(" and returns any non-nil error.")]),e._v(" "),a("li",[a("code",[e._v("TxTimeoutHeightMiddleware")]),e._v(": Check for a "),a("code",[e._v("tx")]),e._v(" height timeout.")]),e._v(" "),a("li",[a("code",[e._v("ValidateMemoMiddleware")]),e._v(": Validates "),a("code",[e._v("tx")]),e._v(" memo with application parameters and returns any non-nil error.")]),e._v(" "),a("li",[a("code",[e._v("ConsumeGasTxSizeMiddleware")]),e._v(": Consumes gas proportional to the "),a("code",[e._v("tx")]),e._v(" size based on application parameters.")]),e._v(" "),a("li",[a("code",[e._v("DeductFeeMiddleware")]),e._v(": Deducts the "),a("code",[e._v("FeeAmount")]),e._v(" from first signer of the "),a("code",[e._v("tx")]),e._v(". If the "),a("code",[e._v("x/feegrant")]),e._v(" module is enabled and a fee granter is set, it deducts fees from the fee granter account.")]),e._v(" "),a("li",[a("code",[e._v("SetPubKeyMiddleware")]),e._v(": Sets the pubkey from a "),a("code",[e._v("tx")]),e._v("'s signers that does not already have its corresponding pubkey saved in the state machine and in the current context.")]),e._v(" "),a("li",[a("code",[e._v("ValidateSigCountMiddleware")]),e._v(": Validates the number of signatures in the "),a("code",[e._v("tx")]),e._v(" based on app-parameters.")]),e._v(" "),a("li",[a("code",[e._v("SigGasConsumeMiddleware")]),e._v(": Consumes parameter-defined amount of gas for each signature. This requires pubkeys to be set in context for all signers as part of "),a("code",[e._v("SetPubKeyMiddleware")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("SigVerificationMiddleware")]),e._v(": Verifies all signatures are valid. This requires pubkeys to be set in context for all signers as part of "),a("code",[e._v("SetPubKeyMiddleware")]),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("IncrementSequenceMiddleware")]),e._v(": Increments the account sequence for each signer to prevent replay attacks.")]),e._v(" "),a("li",[a("code",[e._v("WithBranchedStore")]),e._v(": Creates a new MultiStore branch, discards downstream writes if the downstream returns error.")]),e._v(" "),a("li",[a("code",[e._v("ConsumeBlockGasMiddleware")]),e._v(": Consume block gas.")]),e._v(" "),a("li",[a("code",[e._v("TipMiddleware")]),e._v(": Transfer tips to the fee payer in transactions with tips.")])])])]),e._v(" "),a("p",[e._v("This default list of middlewares can be instantiated using the "),a("code",[e._v("NewDefaultTxHandler")]),e._v(" function. If a chain wants to tweak the list of middlewares, they can create their own "),a("code",[e._v("NewTxHandler")]),e._v(" function using the same template as "),a("code",[e._v("NewDefaultTxHandler")]),e._v(", and chain new middlewares in the "),a("code",[e._v("ComposeMiddleware")]),e._v(" function.")])])}),[],!1,null,null,null);t.default=r.exports}}]);